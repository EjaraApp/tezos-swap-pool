parameter (or (or (map %add_oracles address string) (or (pair %add_pool (mutez %amount) (map %cryptos string string)) (address %change_admin))) (or (or (pair %dip_pool (address %address) (pair (mutez %amount) (string %crypto))) (list %remove_oracles address)) (or (unit %trim_pool) (unit %update_pool))));
storage   (pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))));
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            # == add_oracles ==
            # sp.verify(sp.pack(sp.set_type_expr(self.data.admin, sp.TAddress)) == sp.pack(sp.set_type_expr(sp.sender, sp.TAddress)), message = 'Invalid Admin!') # @parameter%add_oracles : @storage
            SENDER;     # address : @parameter%add_oracles : @storage
            PACK;       # bytes : @parameter%add_oracles : @storage
            DIG 2;      # @storage : bytes : @parameter%add_oracles
            DUP;        # @storage : @storage : bytes : @parameter%add_oracles
            DUG 3;      # @storage : bytes : @parameter%add_oracles : @storage
            CAADR;      # address : bytes : @parameter%add_oracles : @storage
            PACK;       # bytes : bytes : @parameter%add_oracles : @storage
            COMPARE;    # int : @parameter%add_oracles : @storage
            EQ;         # bool : @parameter%add_oracles : @storage
            IF
              {}
              {
                PUSH string "Invalid Admin!"; # string : @parameter%add_oracles : @storage
                FAILWITH;   # FAILED
              }; # @parameter%add_oracles : @storage
            # for oracle in params.oracles.keys(): ... # @parameter%add_oracles : @storage
            DUP;        # @parameter%add_oracles : @parameter%add_oracles : @storage
            ITER
              {
                CAR;        # address : @parameter%add_oracles : @storage
                # self.data.oracles[oracle] = params.oracles[oracle] # address : @parameter%add_oracles : @storage
                DIG 2;      # @storage : address : @parameter%add_oracles
                DUP;        # @storage : @storage : address : @parameter%add_oracles
                CAR;        # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @storage : address : @parameter%add_oracles
                SWAP;       # @storage : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%add_oracles
                CDR;        # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%add_oracles
                DUP;        # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%add_oracles
                CDR;        # pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%add_oracles
                SWAP;       # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%add_oracles
                CAR;        # pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%add_oracles
                DUP;        # pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%add_oracles
                CDR;        # pair (nat %pool_counter) (address %spare) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%add_oracles
                SWAP;       # pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%add_oracles
                CAR;        # map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%add_oracles
                DIG 4;      # address : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%add_oracles
                DIG 5;      # @parameter%add_oracles : address : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                DUP;        # @parameter%add_oracles : @parameter%add_oracles : address : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                DUG 6;      # @parameter%add_oracles : address : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%add_oracles
                SWAP;       # address : @parameter%add_oracles : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%add_oracles
                DUP;        # address : address : @parameter%add_oracles : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%add_oracles
                DUG 2;      # address : @parameter%add_oracles : address : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%add_oracles
                GET;        # option string : address : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%add_oracles
                IF_SOME
                  {
                    # of_some: Get-item:63 # @some : address : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%add_oracles
                  }
                  {
                    PUSH int 63; # int : address : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%add_oracles
                    FAILWITH;   # FAILED
                  }; # @some : address : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%add_oracles
                SOME;       # option string : address : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%add_oracles
                SWAP;       # address : option string : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%add_oracles
                UPDATE;     # map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%add_oracles
                PAIR;       # pair (map address string) (pair (nat %pool_counter) (address %spare)) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%add_oracles
                PAIR;       # pair (pair (map address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%add_oracles
                SWAP;       # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_oracles
                PAIR;       # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))) : @parameter%add_oracles
                SWAP;       # @parameter%add_oracles : pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))))
              }; # @parameter%add_oracles : @storage
            DROP;       # @storage
          }
          {
            IF_LEFT
              {
                # == add_pool ==
                # for crypto in params.cryptos.keys(): ... # @parameter%add_pool : @storage
                DUP;        # @parameter%add_pool : @parameter%add_pool : @storage
                CDR;        # map string string : @parameter%add_pool : @storage
                ITER
                  {
                    CAR;        # string : @parameter%add_pool : @storage
                    # sp.verify(self.data.accepted_cryptos.contains(crypto), message = 'Invalid Crypto!') # string : @parameter%add_pool : @storage
                    DIG 2;      # @storage : string : @parameter%add_pool
                    DUP;        # @storage : @storage : string : @parameter%add_pool
                    DUG 3;      # @storage : string : @parameter%add_pool : @storage
                    CAAAR;      # map string string : string : @parameter%add_pool : @storage
                    SWAP;       # string : map string string : @parameter%add_pool : @storage
                    MEM;        # bool : @parameter%add_pool : @storage
                    IF
                      {}
                      {
                        PUSH string "Invalid Crypto!"; # string : @parameter%add_pool : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%add_pool : @storage
                  }; # @parameter%add_pool : @storage
                SWAP;       # @storage : @parameter%add_pool
                # self.data.open_pool[self.data.pool_counter] = sp.record(amount = params.amount, cryptos = params.cryptos, dips = {}, timelock = sp.add_seconds(sp.now, ((self.data.min_lock * 24) * 60) * 60), timestamp = sp.now) # @storage : @parameter%add_pool
                DUP;        # @storage : @storage : @parameter%add_pool
                DUG 2;      # @storage : @parameter%add_pool : @storage
                DUP;        # @storage : @storage : @parameter%add_pool : @storage
                CDR;        # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @storage : @parameter%add_pool : @storage
                SWAP;       # @storage : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                CAR;        # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                DUP;        # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                CAR;        # pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                SWAP;       # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                CDR;        # pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                DUP;        # pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                CAR;        # big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                SWAP;       # pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                CDR;        # pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                DUP;        # pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) : pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                CAR;        # int : pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                SWAP;       # pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                CDR;        # map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                DIG 6;      # @storage : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool
                DUP;        # @storage : @storage : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool
                DUG 7;      # @storage : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                CDADAR;     # nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                NOW;        # timestamp : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                NOW;        # timestamp : timestamp : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                PUSH int 60; # int : timestamp : timestamp : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                DUP;        # int : int : timestamp : timestamp : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                PUSH int 24; # int : int : int : timestamp : timestamp : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool : @storage
                DIG 12;     # @storage : int : int : int : timestamp : timestamp : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool
                CADDAR;     # int : int : int : int : timestamp : timestamp : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool
                MUL;        # int : int : int : timestamp : timestamp : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool
                MUL;        # int : int : timestamp : timestamp : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool
                MUL;        # int : timestamp : timestamp : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool
                ADD;        # timestamp : timestamp : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool
                PAIR %timelock %timestamp; # pair (timestamp %timelock) (timestamp %timestamp) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool
                EMPTY_MAP nat mutez; # map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool
                PAIR %dips; # pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%add_pool
                DIG 7;      # @parameter%add_pool : pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                PAIR;       # pair @parameter%add_pool (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                SOME;       # option (pair @parameter%add_pool (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                SWAP;       # nat : option (pair @parameter%add_pool (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                UPDATE;     # map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                SWAP;       # int : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                PAIR;       # pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                SWAP;       # big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                PAIR;       # pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                SWAP;       # pair (map %accepted_cryptos string string) (address %admin) : pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                PAIR;       # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                PAIR;       # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))))
                # self.data.pool_counter += 1 # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))))
                DUP;        # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))) : pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))))
                CAR;        # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))))
                SWAP;       # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                CDR;        # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                DUP;        # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                CDR;        # pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SWAP;       # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                CAR;        # pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                DUP;        # pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                CAR;        # map address string : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SWAP;       # pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : map address string : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                CDR;        # pair (nat %pool_counter) (address %spare) : map address string : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                DUP;        # pair (nat %pool_counter) (address %spare) : pair (nat %pool_counter) (address %spare) : map address string : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                CDR;        # address : pair (nat %pool_counter) (address %spare) : map address string : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SWAP;       # pair (nat %pool_counter) (address %spare) : address : map address string : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                CAR;        # nat : address : map address string : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                PUSH nat 1; # nat : nat : address : map address string : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                ADD;        # nat : address : map address string : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                PAIR;       # pair nat address : map address string : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SWAP;       # map address string : pair nat address : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                PAIR;       # pair (map address string) (pair nat address) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                PAIR;       # pair (pair (map address string) (pair nat address)) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SWAP;       # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map address string) (pair nat address)) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                PAIR;       # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map address string) (pair nat address)) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))))
              }
              {
                # == change_admin ==
                # sp.verify(sp.pack(sp.set_type_expr(self.data.spare, sp.TAddress)) == sp.pack(sp.set_type_expr(sp.sender, sp.TAddress)), message = 'Invalid Spare!') # @parameter%change_admin : @storage
                SENDER;     # address : @parameter%change_admin : @storage
                PACK;       # bytes : @parameter%change_admin : @storage
                DIG 2;      # @storage : bytes : @parameter%change_admin
                DUP;        # @storage : @storage : bytes : @parameter%change_admin
                DUG 3;      # @storage : bytes : @parameter%change_admin : @storage
                CDADDR;     # address : bytes : @parameter%change_admin : @storage
                PACK;       # bytes : bytes : @parameter%change_admin : @storage
                COMPARE;    # int : @parameter%change_admin : @storage
                EQ;         # bool : @parameter%change_admin : @storage
                IF
                  {}
                  {
                    PUSH string "Invalid Spare!"; # string : @parameter%change_admin : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%change_admin : @storage
                SWAP;       # @storage : @parameter%change_admin
                # self.data.admin = params.admin # @storage : @parameter%change_admin
                DUP;        # @storage : @storage : @parameter%change_admin
                CDR;        # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @storage : @parameter%change_admin
                SWAP;       # @storage : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%change_admin
                CAR;        # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%change_admin
                DUP;        # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%change_admin
                CDR;        # pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%change_admin
                SWAP;       # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%change_admin
                CAAR;       # map string string : pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%change_admin
                DIG 3;      # @parameter%change_admin : map string string : pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                SWAP;       # map string string : @parameter%change_admin : pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                PAIR;       # pair (map string string) @parameter%change_admin : pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                PAIR;       # pair (pair (map string string) @parameter%change_admin) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))
                PAIR;       # pair (pair (pair (map string string) @parameter%change_admin) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))))
              }; # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map address string) (pair nat address)) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))))
          }; # @storage
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                # == dip_pool ==
                # for crypto in sp.list([params.crypto]): ... # @parameter%dip_pool : @storage
                DUP;        # @parameter%dip_pool : @parameter%dip_pool : @storage
                CDDR;       # string : @parameter%dip_pool : @storage
                NIL string; # list string : string : @parameter%dip_pool : @storage
                SWAP;       # string : list string : @parameter%dip_pool : @storage
                CONS;       # list string : @parameter%dip_pool : @storage
                ITER
                  {
                    # sp.verify(self.data.accepted_cryptos.contains(crypto), message = 'Invalid Crypto!') # string : @parameter%dip_pool : @storage
                    DIG 2;      # @storage : string : @parameter%dip_pool
                    DUP;        # @storage : @storage : string : @parameter%dip_pool
                    DUG 3;      # @storage : string : @parameter%dip_pool : @storage
                    CAAAR;      # map string string : string : @parameter%dip_pool : @storage
                    SWAP;       # string : map string string : @parameter%dip_pool : @storage
                    MEM;        # bool : @parameter%dip_pool : @storage
                    IF
                      {}
                      {
                        PUSH string "Invalid Crypto!"; # string : @parameter%dip_pool : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%dip_pool : @storage
                  }; # @parameter%dip_pool : @storage
                # y = sp.local("y", {}) # @parameter%dip_pool : @storage
                EMPTY_MAP nat mutez; # map nat mutez : @parameter%dip_pool : @storage
                SWAP;       # @parameter%dip_pool : map nat mutez : @storage
                # s = sp.local("s", params.amount) # @parameter%dip_pool : map nat mutez : @storage
                DUP;        # @parameter%dip_pool : @parameter%dip_pool : map nat mutez : @storage
                DUG 2;      # @parameter%dip_pool : map nat mutez : @parameter%dip_pool : @storage
                CDAR;       # mutez : map nat mutez : @parameter%dip_pool : @storage
                # for k in self.data.open_pool.keys(): ... # mutez : map nat mutez : @parameter%dip_pool : @storage
                DIG 3;      # @storage : mutez : map nat mutez : @parameter%dip_pool
                DUP;        # @storage : @storage : mutez : map nat mutez : @parameter%dip_pool
                DUG 4;      # @storage : mutez : map nat mutez : @parameter%dip_pool : @storage
                CADDDR;     # map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                ITER
                  {
                    CAR;        # nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    # if self.data.open_pool[k].cryptos.contains(params.crypto): # nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DIG 4;      # @storage : nat : mutez : map nat mutez : @parameter%dip_pool
                    DUP;        # @storage : @storage : nat : mutez : map nat mutez : @parameter%dip_pool
                    DUG 5;      # @storage : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CADDDR;     # map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    SWAP;       # nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DUP;        # nat : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DUG 2;      # nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    GET;        # option (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:103 # @some : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                      }
                      {
                        PUSH int 103; # int : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        FAILWITH;   # FAILED
                      }; # @some : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CADR;       # map string string : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DIG 4;      # @parameter%dip_pool : map string string : nat : mutez : map nat mutez : @storage
                    DUP;        # @parameter%dip_pool : @parameter%dip_pool : map string string : nat : mutez : map nat mutez : @storage
                    DUG 5;      # @parameter%dip_pool : map string string : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CDDR;       # string : map string string : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    MEM;        # bool : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    IF
                      {
                        # x = sp.local("x", self.data.open_pool[k].amount) # nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        DIG 4;      # @storage : nat : mutez : map nat mutez : @parameter%dip_pool
                        DUP;        # @storage : @storage : nat : mutez : map nat mutez : @parameter%dip_pool
                        DUG 5;      # @storage : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        CADDDR;     # map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        SWAP;       # nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                        DUP;        # nat : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                        DUG 2;      # nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        GET;        # option (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        IF_SOME
                          {
                            # of_some: Get-item:105 # @some : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                          }
                          {
                            PUSH int 105; # int : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            FAILWITH;   # FAILED
                          }; # @some : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        CAAR;       # mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        # for j in self.data.open_pool[k].dips.keys(): ... # mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        DIG 5;      # @storage : mutez : nat : mutez : map nat mutez : @parameter%dip_pool
                        DUP;        # @storage : @storage : mutez : nat : mutez : map nat mutez : @parameter%dip_pool
                        DUG 6;      # @storage : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        CADDDR;     # map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        DIG 2;      # nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : mutez : mutez : map nat mutez : @parameter%dip_pool : @storage
                        DUP;        # nat : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : mutez : mutez : map nat mutez : @parameter%dip_pool : @storage
                        DUG 3;      # nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        GET;        # option (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        IF_SOME
                          {
                            # of_some: Get-item:106 # @some : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                          }
                          {
                            PUSH int 106; # int : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            FAILWITH;   # FAILED
                          }; # @some : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        CDAR;       # map nat mutez : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        ITER
                          {
                            CAR;        # nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            # if self.data.swap_pool[j].timelock > sp.now: # nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            NOW;        # timestamp : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            DIG 7;      # @storage : timestamp : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool
                            DUP;        # @storage : @storage : timestamp : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool
                            DUG 8;      # @storage : timestamp : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            CDDDAR;     # big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : timestamp : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            DIG 2;      # nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : timestamp : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            DUP;        # nat : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : timestamp : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            DUG 3;      # nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : timestamp : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            GET;        # option (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : timestamp : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            IF_SOME
                              {
                                # of_some: Get-item:107 # @some : timestamp : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                              }
                              {
                                PUSH int 107; # int : timestamp : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                FAILWITH;   # FAILED
                              }; # @some : timestamp : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            CDDAR;      # timestamp : timestamp : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            COMPARE;    # int : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            GT;         # bool : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            IF
                              {
                                # x.value -= self.data.open_pool[k].dips[j] # nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                DIG 6;      # @storage : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool
                                DUP;        # @storage : @storage : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool
                                DUG 7;      # @storage : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                CADDDR;     # map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                DIG 3;      # nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : mutez : mutez : map nat mutez : @parameter%dip_pool : @storage
                                DUP;        # nat : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : mutez : mutez : map nat mutez : @parameter%dip_pool : @storage
                                DUG 4;      # nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                GET;        # option (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                IF_SOME
                                  {
                                    # of_some: Get-item:108 # @some : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                  }
                                  {
                                    PUSH int 108; # int : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                    FAILWITH;   # FAILED
                                  }; # @some : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                CDAR;       # map nat mutez : nat : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                SWAP;       # nat : map nat mutez : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                GET;        # option mutez : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                IF_SOME
                                  {
                                    # of_some: Get-item:108 # @some : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                  }
                                  {
                                    PUSH int 108; # int : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                    FAILWITH;   # FAILED
                                  }; # @some : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                SWAP;       # mutez : @some : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                SUB;        # mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                              }
                              {
                                DROP;       # mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                              }; # mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                          }; # mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        # if x.value > sp.tez(0): # mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        DUP;        # mutez : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        PUSH mutez 0; # mutez : mutez : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        COMPARE;    # int : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        LT;         # bool : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                        IF
                          {
                            # if s.value > sp.tez(0): # mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            PUSH mutez 0; # mutez : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            DIG 3;      # mutez : mutez : mutez : nat : map nat mutez : @parameter%dip_pool : @storage
                            DUP;        # mutez : mutez : mutez : mutez : nat : map nat mutez : @parameter%dip_pool : @storage
                            DUG 4;      # mutez : mutez : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            COMPARE;    # int : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            GT;         # bool : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                            IF
                              {
                                # if x.value <= s.value: # mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                DIG 2;      # mutez : mutez : nat : map nat mutez : @parameter%dip_pool : @storage
                                DUP;        # mutez : mutez : mutez : nat : map nat mutez : @parameter%dip_pool : @storage
                                DUG 3;      # mutez : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                SWAP;       # mutez : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                DUP;        # mutez : mutez : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                DUG 2;      # mutez : mutez : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                COMPARE;    # int : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                LE;         # bool : mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                IF
                                  {
                                    # y.value[k] = x.value # mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                    DIG 3;      # map nat mutez : mutez : nat : mutez : @parameter%dip_pool : @storage
                                    DUG 2;      # mutez : nat : map nat mutez : mutez : @parameter%dip_pool : @storage
                                    DUP;        # mutez : mutez : nat : map nat mutez : mutez : @parameter%dip_pool : @storage
                                    DUG 3;      # mutez : nat : map nat mutez : mutez : mutez : @parameter%dip_pool : @storage
                                    SOME;       # option mutez : nat : map nat mutez : mutez : mutez : @parameter%dip_pool : @storage
                                    SWAP;       # nat : option mutez : map nat mutez : mutez : mutez : @parameter%dip_pool : @storage
                                    UPDATE;     # map nat mutez : mutez : mutez : @parameter%dip_pool : @storage
                                    DUG 2;      # mutez : mutez : map nat mutez : @parameter%dip_pool : @storage
                                  }
                                  {
                                    # y.value[k] = s.value # mutez : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                                    DIG 3;      # map nat mutez : mutez : nat : mutez : @parameter%dip_pool : @storage
                                    DIG 2;      # nat : map nat mutez : mutez : mutez : @parameter%dip_pool : @storage
                                    DIG 3;      # mutez : nat : map nat mutez : mutez : @parameter%dip_pool : @storage
                                    DUP;        # mutez : mutez : nat : map nat mutez : mutez : @parameter%dip_pool : @storage
                                    DUG 4;      # mutez : nat : map nat mutez : mutez : mutez : @parameter%dip_pool : @storage
                                    SOME;       # option mutez : nat : map nat mutez : mutez : mutez : @parameter%dip_pool : @storage
                                    SWAP;       # nat : option mutez : map nat mutez : mutez : mutez : @parameter%dip_pool : @storage
                                    UPDATE;     # map nat mutez : mutez : mutez : @parameter%dip_pool : @storage
                                    DUG 2;      # mutez : mutez : map nat mutez : @parameter%dip_pool : @storage
                                  }; # mutez : mutez : map nat mutez : @parameter%dip_pool : @storage
                                SWAP;       # mutez : mutez : map nat mutez : @parameter%dip_pool : @storage
                                # s.value -= x.value # mutez : mutez : map nat mutez : @parameter%dip_pool : @storage
                                SUB;        # mutez : map nat mutez : @parameter%dip_pool : @storage
                              }
                              {
                                DROP 2;     # mutez : map nat mutez : @parameter%dip_pool : @storage
                              }; # mutez : map nat mutez : @parameter%dip_pool : @storage
                          }
                          {
                            DROP 2;     # mutez : map nat mutez : @parameter%dip_pool : @storage
                          }; # mutez : map nat mutez : @parameter%dip_pool : @storage
                      }
                      {
                        DROP;       # mutez : map nat mutez : @parameter%dip_pool : @storage
                      }; # mutez : map nat mutez : @parameter%dip_pool : @storage
                  }; # mutez : map nat mutez : @parameter%dip_pool : @storage
                # sp.verify(s.value <= sp.tez(0), message = 'Could not satify exchange request!') # mutez : map nat mutez : @parameter%dip_pool : @storage
                DUP;        # mutez : mutez : map nat mutez : @parameter%dip_pool : @storage
                PUSH mutez 0; # mutez : mutez : mutez : map nat mutez : @parameter%dip_pool : @storage
                SWAP;       # mutez : mutez : mutez : map nat mutez : @parameter%dip_pool : @storage
                COMPARE;    # int : mutez : map nat mutez : @parameter%dip_pool : @storage
                LE;         # bool : mutez : map nat mutez : @parameter%dip_pool : @storage
                IF
                  {}
                  {
                    PUSH string "Could not satify exchange request!"; # string : mutez : map nat mutez : @parameter%dip_pool : @storage
                    FAILWITH;   # FAILED
                  }; # mutez : map nat mutez : @parameter%dip_pool : @storage
                SWAP;       # map nat mutez : mutez : @parameter%dip_pool : @storage
                # for t in y.value.keys(): ... # map nat mutez : mutez : @parameter%dip_pool : @storage
                DUP;        # map nat mutez : map nat mutez : mutez : @parameter%dip_pool : @storage
                DUG 2;      # map nat mutez : mutez : map nat mutez : @parameter%dip_pool : @storage
                ITER
                  {
                    CAR;        # nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    # self.data.open_pool[t].dips[self.data.swap_counter] = y.value[t] # nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DIG 4;      # @storage : nat : mutez : map nat mutez : @parameter%dip_pool
                    DUP;        # @storage : @storage : nat : mutez : map nat mutez : @parameter%dip_pool
                    DUG 5;      # @storage : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DUP;        # @storage : @storage : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CDR;        # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @storage : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    SWAP;       # @storage : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CAR;        # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DUP;        # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CAR;        # pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    SWAP;       # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CDR;        # pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DUP;        # pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CAR;        # big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    SWAP;       # pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CDR;        # pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DUP;        # pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) : pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CAR;        # int : pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    SWAP;       # pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CDR;        # map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DUP;        # map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : nat : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DIG 6;      # nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DUP;        # nat : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DUG 2;      # nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    GET;        # option (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    IF_SOME
                      {}
                      {
                        PUSH int 123; # int : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                        FAILWITH;   # FAILED
                      }; # @some : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DUP;        # @some : @some : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CAR;        # pair (mutez %amount) (map %cryptos string string) : @some : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    SWAP;       # @some : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CDR;        # pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DUP;        # pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)) : pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CDR;        # pair (timestamp %timelock) (timestamp %timestamp) : pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    SWAP;       # pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)) : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CAR;        # map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    DIG 12;     # @storage : map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    CDDAR;      # nat : map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    DIG 11;     # map nat mutez : nat : map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : @parameter%dip_pool
                    DUP;        # map nat mutez : map nat mutez : nat : map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : @parameter%dip_pool
                    DUG 12;     # map nat mutez : nat : map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    DIG 5;      # nat : map nat mutez : nat : map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    DUP;        # nat : nat : map nat mutez : nat : map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    DUG 6;      # nat : map nat mutez : nat : map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    GET;        # option mutez : nat : map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    IF_SOME
                      {
                        # of_some: Get-item:123 # @some : nat : map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                      }
                      {
                        PUSH int 123; # int : nat : map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                        FAILWITH;   # FAILED
                      }; # @some : nat : map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    SOME;       # option mutez : nat : map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    SWAP;       # nat : option mutez : map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    UPDATE;     # map nat mutez : pair (timestamp %timelock) (timestamp %timestamp) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    PAIR;       # pair (map nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)) : pair (mutez %amount) (map %cryptos string string) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    SWAP;       # pair (mutez %amount) (map %cryptos string string) : pair (map nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    PAIR;       # pair (pair (mutez %amount) (map %cryptos string string)) (pair (map nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    SOME;       # option (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    SWAP;       # nat : option (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    UPDATE;     # map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : int : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    SWAP;       # int : map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    PAIR;       # pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) : big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    SWAP;       # big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))) : pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    PAIR;       # pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (map %accepted_cryptos string string) (address %admin) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    SWAP;       # pair (map %accepted_cryptos string string) (address %admin) : pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    PAIR;       # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : mutez : map nat mutez : @parameter%dip_pool
                    PAIR;       # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))) : mutez : map nat mutez : @parameter%dip_pool
                    DUG 3;      # mutez : map nat mutez : @parameter%dip_pool : pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair int (map nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))))
                  }; # mutez : map nat mutez : @parameter%dip_pool : @storage
                # self.data.swap_pool[self.data.swap_counter] = sp.record(address = params.address, amount = params.amount, crypto = params.crypto, swapped = False, swaps = y.value.keys(), timelock = sp.add_seconds(sp.now, self.data.timelocks[params.crypto] * 60), timestamp = sp.now) # mutez : map nat mutez : @parameter%dip_pool : @storage
                DIG 3;      # @storage : mutez : map nat mutez : @parameter%dip_pool
                DUP;        # @storage : @storage : mutez : map nat mutez : @parameter%dip_pool
                DUG 4;      # @storage : mutez : map nat mutez : @parameter%dip_pool : @storage
                DUP;        # @storage : @storage : mutez : map nat mutez : @parameter%dip_pool : @storage
                CAR;        # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @storage : mutez : map nat mutez : @parameter%dip_pool : @storage
                SWAP;       # @storage : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                CDR;        # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                DUP;        # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                CAR;        # pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                SWAP;       # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                CDR;        # pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                DUP;        # pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                CAR;        # nat : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                SWAP;       # pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                CDR;        # pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int) : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                DUP;        # pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int) : pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int) : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                CDR;        # map string int : pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int) : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                SWAP;       # pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                CAR;        # big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                DIG 8;      # @storage : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool
                DUP;        # @storage : @storage : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool
                DUG 9;      # @storage : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                CDDAR;      # nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                NOW;        # timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                NOW;        # timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                PUSH int 60; # int : timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                DIG 12;     # @storage : int : timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool
                DUP;        # @storage : @storage : int : timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool
                DUG 13;     # @storage : int : timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                CDDDDR;     # map string int : int : timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                DIG 12;     # @parameter%dip_pool : map string int : int : timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @storage
                DUP;        # @parameter%dip_pool : @parameter%dip_pool : map string int : int : timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @storage
                DUG 13;     # @parameter%dip_pool : map string int : int : timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                CDDR;       # string : map string int : int : timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                GET;        # option int : int : timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                IF_SOME
                  {
                    # of_some: Get-item:125 # @some : int : timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                  }
                  {
                    PUSH int 125; # int : int : timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    FAILWITH;   # FAILED
                  }; # @some : int : timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                MUL;        # int : timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                ADD;        # timestamp : timestamp : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                PAIR %timelock %timestamp; # pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                NIL nat;    # list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                DIG 9;      # map nat mutez : list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : @parameter%dip_pool : @storage
                DUP;        # map nat mutez : map nat mutez : list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : @parameter%dip_pool : @storage
                DUG 10;     # map nat mutez : list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                ITER
                  {
                    CAR;        # nat : list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                    CONS;       # list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                  }; # list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : mutez : map nat mutez : @parameter%dip_pool : @storage
                DIG 8;      # mutez : list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : map nat mutez : @parameter%dip_pool : @storage
                DROP;       # list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : map nat mutez : @parameter%dip_pool : @storage
                DIG 8;      # map nat mutez : list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%dip_pool : @storage
                DROP;       # list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%dip_pool : @storage
                DIG 9;      # @storage : list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%dip_pool
                DROP;       # list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%dip_pool
                NIL nat;    # list nat : list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%dip_pool
                SWAP;       # list nat : list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%dip_pool
                ITER
                  {
                    CONS;       # list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%dip_pool
                  }; # list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%dip_pool
                PUSH bool False; # bool : list nat : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%dip_pool
                PAIR %swapped %swaps; # pair (bool %swapped) (list %swaps nat) : pair (timestamp %timelock) (timestamp %timestamp) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%dip_pool
                PAIR;       # pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%dip_pool
                DIG 7;      # @parameter%dip_pool : pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                DUP;        # @parameter%dip_pool : @parameter%dip_pool : pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                CDDR;       # string : @parameter%dip_pool : pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SWAP;       # @parameter%dip_pool : string : pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                DUP;        # @parameter%dip_pool : @parameter%dip_pool : string : pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                DUG 9;      # @parameter%dip_pool : string : pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%dip_pool
                CDAR;       # mutez : string : pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%dip_pool
                PAIR %amount %crypto; # pair (mutez %amount) (string %crypto) : pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%dip_pool
                DIG 8;      # @parameter%dip_pool : pair (mutez %amount) (string %crypto) : pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                CAR;        # address : pair (mutez %amount) (string %crypto) : pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                PAIR %address; # pair (address %address) (pair (mutez %amount) (string %crypto)) : pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                PAIR;       # pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SOME;       # option (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : nat : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SWAP;       # nat : option (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                UPDATE;     # big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp)))) : map string int : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                PAIR;       # pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int) : nat : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SWAP;       # nat : pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                PAIR;       # pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int)) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SWAP;       # pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                PAIR;       # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SWAP;       # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int)))
                PAIR;       # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int))))
                # self.data.swap_counter += 1 # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int))))
                DUP;        # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int)))) : pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int))))
                CAR;        # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int))))
                SWAP;       # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int)))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                CDR;        # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                DUP;        # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                CAR;        # pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SWAP;       # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int))) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                CDR;        # pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int)) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                DUP;        # pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int)) : pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int)) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                CDR;        # pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int) : pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int)) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SWAP;       # pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int)) : pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                CAR;        # nat : pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                PUSH nat 1; # nat : nat : pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                ADD;        # nat : pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                PAIR;       # pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int)) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SWAP;       # pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                PAIR;       # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))
                SWAP;       # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int)))
                PAIR;       # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int))))
              }
              {
                # == remove_oracles ==
                # sp.verify(sp.pack(sp.set_type_expr(self.data.admin, sp.TAddress)) == sp.pack(sp.set_type_expr(sp.sender, sp.TAddress)), message = 'Invalid Admin!') # @parameter%remove_oracles : @storage
                SENDER;     # address : @parameter%remove_oracles : @storage
                PACK;       # bytes : @parameter%remove_oracles : @storage
                DIG 2;      # @storage : bytes : @parameter%remove_oracles
                DUP;        # @storage : @storage : bytes : @parameter%remove_oracles
                DUG 3;      # @storage : bytes : @parameter%remove_oracles : @storage
                CAADR;      # address : bytes : @parameter%remove_oracles : @storage
                PACK;       # bytes : bytes : @parameter%remove_oracles : @storage
                COMPARE;    # int : @parameter%remove_oracles : @storage
                EQ;         # bool : @parameter%remove_oracles : @storage
                IF
                  {}
                  {
                    PUSH string "Invalid Admin!"; # string : @parameter%remove_oracles : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%remove_oracles : @storage
                # for oracle in params.oracles: ... # @parameter%remove_oracles : @storage
                DUP;        # @parameter%remove_oracles : @parameter%remove_oracles : @storage
                ITER
                  {
                    # if self.data.oracles.contains(oracle): # address : @parameter%remove_oracles : @storage
                    DIG 2;      # @storage : address : @parameter%remove_oracles
                    DUP;        # @storage : @storage : address : @parameter%remove_oracles
                    DUG 3;      # @storage : address : @parameter%remove_oracles : @storage
                    CDAAR;      # map address string : address : @parameter%remove_oracles : @storage
                    SWAP;       # address : map address string : @parameter%remove_oracles : @storage
                    DUP;        # address : address : map address string : @parameter%remove_oracles : @storage
                    DUG 2;      # address : map address string : address : @parameter%remove_oracles : @storage
                    MEM;        # bool : address : @parameter%remove_oracles : @storage
                    IF
                      {
                        # del self.data.oracles[oracle] # address : @parameter%remove_oracles : @storage
                        DIG 2;      # @storage : address : @parameter%remove_oracles
                        DUP;        # @storage : @storage : address : @parameter%remove_oracles
                        CAR;        # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @storage : address : @parameter%remove_oracles
                        SWAP;       # @storage : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%remove_oracles
                        CDR;        # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%remove_oracles
                        DUP;        # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%remove_oracles
                        CDR;        # pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%remove_oracles
                        SWAP;       # pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%remove_oracles
                        CAR;        # pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%remove_oracles
                        DUP;        # pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%remove_oracles
                        CDR;        # pair (nat %pool_counter) (address %spare) : pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%remove_oracles
                        SWAP;       # pair (map %oracles address string) (pair (nat %pool_counter) (address %spare)) : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%remove_oracles
                        CAR;        # map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%remove_oracles
                        NONE string; # option string : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : address : @parameter%remove_oracles
                        DIG 5;      # address : option string : map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%remove_oracles
                        UPDATE;     # map address string : pair (nat %pool_counter) (address %spare) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%remove_oracles
                        PAIR;       # pair (map address string) (pair (nat %pool_counter) (address %spare)) : pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%remove_oracles
                        PAIR;       # pair (pair (map address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : @parameter%remove_oracles
                        SWAP;       # pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))))) : pair (pair (map address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))) : @parameter%remove_oracles
                        PAIR;       # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int)))) : @parameter%remove_oracles
                        SWAP;       # @parameter%remove_oracles : pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))))
                      }
                      {
                        DROP;       # @parameter%remove_oracles : @storage
                      }; # @parameter%remove_oracles : pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map address string) (pair (nat %pool_counter) (address %spare))) (pair (nat %swap_counter) (pair (big_map %swap_pool nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map %timelocks string int))))
                  }; # @parameter%remove_oracles : @storage
                DROP;       # @storage
              }; # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int))))
          }
          {
            IF_LEFT
              {
                DROP;       # @storage
                # == trim_pool ==
                # sp.verify(self.data.oracles.contains(sp.sender), message = 'Invalid Oracle!') # @storage
                DUP;        # @storage : @storage
                CDAAR;      # map address string : @storage
                SENDER;     # address : map address string : @storage
                MEM;        # bool : @storage
                IF
                  {}
                  {
                    PUSH string "Invalid Oracle!"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
              }
              {
                DROP;       # @storage
                # == update_pool ==
                # sp.verify(self.data.oracles.contains(sp.sender), message = 'Invalid Oracle!') # @storage
                DUP;        # @storage : @storage
                CDAAR;      # map address string : @storage
                SENDER;     # address : map address string : @storage
                MEM;        # bool : @storage
                IF
                  {}
                  {
                    PUSH string "Invalid Oracle!"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
              }; # @storage
          }; # pair (pair (pair (map %accepted_cryptos string string) (address %admin)) (pair (big_map %closed_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp))))) (pair (int %min_lock) (map %open_pool nat (pair (pair (mutez %amount) (map %cryptos string string)) (pair (map %dips nat mutez) (pair (timestamp %timelock) (timestamp %timestamp)))))))) (pair (pair (map %oracles address string) (pair (nat %pool_counter) (address %spare))) (pair nat (pair (big_map nat (pair (pair (address %address) (pair (mutez %amount) (string %crypto))) (pair (pair (bool %swapped) (list %swaps nat)) (pair (timestamp %timelock) (timestamp %timestamp))))) (map string int))))
      }; # @storage
    NIL operation; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };
